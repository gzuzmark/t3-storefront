// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource postgresql {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                      String     @id @default(cuid())
    name                    String     @default("")
    email                   String     @unique @default("")
    password                String
    cart                    CartItem[] @relation("CartItem_user")
    orders                  Order[]    @relation("Order_user")
    passwordResetToken      String?
    passwordResetIssuedAt   DateTime?
    passwordResetRedeemedAt DateTime?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model Product {
  id                    String        @id @default(cuid())
  name                  String        @default("")
  description           String        @default("")
  photo                 ProductImage? @relation("Product_photo", fields: [photoId], references: [id])
  photoId               String?       @unique @map("photo") @postgresql.Uuid
  price                 Int?
  status                String?       @default("DRAFT")
  from_CartItem_product CartItem[]    @relation("CartItem_product")
}

model ProductImage {
  id                   String      @id @default(uuid()) @postgresql.Uuid
  image                Json?
  altText              String      @default("")
  product              Product?    @relation("Product_photo")
  from_OrderItem_photo OrderItem[] @relation("OrderItem_photo")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int?     @default(1)
  product   Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId String?  @map("product")
  user      User?    @relation("CartItem_user", fields: [userId], references: [id])
  userId    String?  @map("user")

  @@index([productId])
  @@index([userId])
}

model OrderItem {
  id          String        @id @default(cuid())
  name        String        @default("")
  description String        @default("")
  photo       ProductImage? @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId     String?       @map("photo") @postgresql.Uuid
  price       Int?
  quantity    Int?
  order       Order?        @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     String?       @map("order")

  @@index([photoId])
  @@index([orderId])
}

model Order {
  id     String      @id @default(cuid())
  total  Int?
  items  OrderItem[] @relation("OrderItem_order")
  user   User?       @relation("Order_user", fields: [userId], references: [id])
  userId String?     @map("user")
  charge String      @default("")

  @@index([userId])
}